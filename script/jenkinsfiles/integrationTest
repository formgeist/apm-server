library identifier: 'apm@master', 
retriever: modernSCM(
  [$class: 'GitSCMSource', 
  credentialsId: 'f94e9298-83ae-417e-ba91-85c279771570', 
  id: '37cf2c00-2cc7-482e-8c62-7bbffef475e2', 
  remote: 'git@github.com:elastic/apm-pipeline-library.git'])

def runIntegrationTestAxisForAgent(agentType){
  def parallelStages = [:]
  def ymlFiles = readJSON(text: "${YAML_FILES}")
  def nodeVersions = readYaml(file: ymlFiles["${agentType}"])
  def serverVersions = readYaml(file: ymlFiles["apm-server"])
  def serverVersNoExcluded = serverVersions["APM_SERVER"]?.findAll{!serverVersions?.exclude?.contains(it)}
  def nodeVersNoExcluded = nodeVersions["${agentType.toUpperCase()}_AGENT"]?.findAll{!nodeVersions?.exclude?.contains(it)}
  serverVersNoExcluded.each{ server ->
    nodeVersNoExcluded.each{ agent ->
      def tag = "${agentType} ${agent} - Server ${server}"
      parallelStages[tag] = runIntegrationTest(tag, agent, server, "versions_${agentType}")
    }
  }
  parallel(parallelStages)
}

def runIntegrationTest(tag, agent, server, agentType){
  return {
    node('linux') {
      withEnvWrapper() {
        deleteDir()
        unstash "source_intest"
        dir("${TEST_BASE_DIR}"){
          def pytestIni = "[pytest]\njunit_suite_name = ${agentType} ${agent} ${server}\n"
          writeFile(file: "pytest.ini", text: pytestIni, encoding: "UTF-8")
          
          try {
            echo "${tag}"
            sh """#!/bin/bash
            TMPDIR="${WORKSPACE}"
            VENV="${WORKSPACE}"
            chmod ugo+rx ./scripts/ci/*.sh
            ./scripts/ci/${agentType}.sh "${agent}" "${server}"
            """
          } catch (err) {
            echo "${err}"
            throw err
          } finally {
            junit(
              allowEmptyResults: true, 
              keepLongStdio: true, 
              testResults: "tests/results/*-junit*.xml")
            deleteDir()
          }
        }
      }
    }
  }  
}

pipeline {
    agent any 
    environment {
      HOME = "${env.HUDSON_HOME}"
      BASE_DIR="src/github.com/elastic/apm-server"
      JOB_GIT_URL="git@github.com:kuisathaverat/apm-server.git"
      JOB_GIT_INTEGRATION_URL="git@github.com:elastic/apm-integration-testing.git"
      TEST_BASE_DIR = "src/github.com/elastic/apm-integration-testing"
      YAML_FILES = """{
        'nodejs': 'tests/versions/nodejs.yml',
        'python': 'tests/versions/python.yml',
        'ruby': 'tests/versions/ruby.yml',
        'apm-server': 'tests/versions/apm_server.yml'
      }
      """
    }
     
    options {
      timeout(time: 1, unit: 'HOURS') 
      buildDiscarder(logRotator(numToKeepStr: '3', artifactNumToKeepStr: '2', daysToKeepStr: '30'))
      timestamps()
    }
    parameters {
      string(name: 'JOB_SHELL', defaultValue: "/usr/local/bin/runbld", description: "Shell script base commandline to use to run scripts")
      string(name: 'JOB_INTEGRATION_TEST_BRANCH_SPEC', defaultValue: "refs/heads/master", description: "the Git branch specifier to make the integrations test")
      booleanParam(name: 'Go_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'Java_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'Kibana_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'NodeJS_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'Python_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'Ruby_Test', defaultValue: false, description: 'Enable Test')
      booleanParam(name: 'Server_Test', defaultValue: false, description: 'Enable Test')
    }
    stages{
      stage('Checkout Integration Tests'){
        agent { label 'linux' }
        steps {
          withEnvWrapper() {
            dir("${TEST_BASE_DIR}"){
              checkout([$class: 'GitSCM', branches: [[name: "${JOB_INTEGRATION_TEST_BRANCH_SPEC}"]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: "${JOB_GIT_CREDENTIALS}", 
                url: "${JOB_GIT_INTEGRATION_URL}"]]])
            }
            stash allowEmpty: true, name: 'source_intest'
          }
        }  
      }

      stage('Parallel Integration Tests'){
        failFast false
        parallel {
          stage('Server integration test') { 
            environment {
              COMPOSE_ARGS = "master --no-apm-server-dashboards --no-kibana"
            }
            when { 
              beforeAgent true
              environment name: 'Server_Test', value: 'true' 
            }
            steps {
              script {
                runIntegrationTest("Server integration test", "", "", "server").call()
              }
            }
          }
          stage('Kibana integration test') { 
            environment {
              COMPOSE_ARGS = "master --no-apm-server-dashboards"
            }
            when { 
              beforeAgent true
              environment name: 'Kibana_Test', value: 'true' 
            }
            steps {
              script {
                runIntegrationTest("Kibana integration test", "", "", "kibana").call()
              }
            }
          }
          stage('Java integration test') { 
            environment {
              COMPOSE_ARGS = "master --no-apm-server-dashboards --no-kibana --with-agent-java-spring --force-build --build-parallel"
            }
            when { 
              beforeAgent true
              environment name: 'Java_Test', value: 'true' 
            }
            steps {
              script {
                runIntegrationTest("Java integration test", "", "", "java").call()
              }
            }  
          }
          stage('Go integration test') { 
            environment {
              COMPOSE_ARGS = "master --no-apm-server-dashboards --no-kibana --with-agent-go-net-http --force-build --build-parallel"
            }
            when { 
              beforeAgent true
              environment name: 'Go_Test', value: 'true' 
            }
            steps {
              script {
                runIntegrationTest("Go integration test", "", "", "go").call()
              }
            } 
          }
      /**
        run all integration test with the commit version.
      */
      stage('NodeJS integration test') { 
        when { 
          beforeAgent true
          environment name: 'NodeJS_Test', value: 'true' 
        }
        steps {
          withEnvWrapper() {
            unstash "source_intest"
            dir("${TEST_BASE_DIR}"){
              script {
                runIntegrationTestAxisForAgent("nodejs")
              }
            }
            deleteDir()
          }  
        } 
      }
      stage('Python integration test') { 
        when { 
          beforeAgent true
          environment name: 'Python_Test', value: 'true' 
        }
        steps {
          withEnvWrapper() {
            unstash "source_intest"
            dir("${TEST_BASE_DIR}"){
              script {
                runIntegrationTestAxisForAgent("python")
              }
            }
            deleteDir()
          }  
        } 
      }
      stage('Ruby integration test') { 
        when { 
          beforeAgent true
          environment name: 'Ruby_Test', value: 'true' 
        }
        steps {
          withEnvWrapper() {
            unstash "source_intest"
            dir("${TEST_BASE_DIR}"){
              script {
                runIntegrationTestAxisForAgent("ruby")
              }
            }
            deleteDir()
          }  
        } 
      }
    }
  }
}
}